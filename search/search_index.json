{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Google Earth Engine Batch Asset Manager docs! Google Earth Engine Batch Asset Manager, GEEBAM , helps in management of assets on the Earth Engine What's Earth Engine? Google Earth Engine combines a multi-petabyte catalog of satellite imagery and geospatial datasets with planetary-scale analysis capabilities and makes it available for scientists, researchers, and developers to detect changes, map trends, and quantify differences on the Earth's surface. Why GEEBAM? Google Earth Engine is an amazing tool, but lacks one essential feature for some of the work we have been doing: ability to upload assets in batch mode. In one use case we were looking at biodiversity for thousands of terrestrial vertebrates. In order to compute forest loss, we had to upload first range maps of all species of interest - that's how GEEBAM was born. If you're curious about our work, Birdlife article covers it nicely. More in-depth treatment can be found in our article Toward quantification of the impact of 21st\u2010century deforestation on the extinction risk of terrestrial vertebrates .","title":"Home"},{"location":"#welcome-to-the-google-earth-engine-batch-asset-manager-docs","text":"Google Earth Engine Batch Asset Manager, GEEBAM , helps in management of assets on the Earth Engine","title":"Welcome to the Google Earth Engine Batch Asset Manager docs!"},{"location":"#whats-earth-engine","text":"Google Earth Engine combines a multi-petabyte catalog of satellite imagery and geospatial datasets with planetary-scale analysis capabilities and makes it available for scientists, researchers, and developers to detect changes, map trends, and quantify differences on the Earth's surface.","title":"What's Earth Engine?"},{"location":"#why-geebam","text":"Google Earth Engine is an amazing tool, but lacks one essential feature for some of the work we have been doing: ability to upload assets in batch mode. In one use case we were looking at biodiversity for thousands of terrestrial vertebrates. In order to compute forest loss, we had to upload first range maps of all species of interest - that's how GEEBAM was born. If you're curious about our work, Birdlife article covers it nicely. More in-depth treatment can be found in our article Toward quantification of the impact of 21st\u2010century deforestation on the extinction risk of terrestrial vertebrates .","title":"Why GEEBAM?"},{"location":"about/","text":"About Hi, I'm Lukasz - software engineer and scientist. All of my work for nature conservation is done on pro bono basis and freely available under permissible licences. I inhale carbon dioxide and exhale endangered species while coding. Cheers!","title":"About"},{"location":"about/#about","text":"Hi, I'm Lukasz - software engineer and scientist. All of my work for nature conservation is done on pro bono basis and freely available under permissible licences. I inhale carbon dioxide and exhale endangered species while coding. Cheers!","title":"About"},{"location":"developer_notes/","text":"Developer notes Interactive tests Oxymoron similar to \"holidays with kids\". Since some of these tests are interactive, they're hardly that inviting to run with every change. The issue here is that proper testing of some of the functionality requires developer to be logged in to the service. How to run tests Install the package first, either through pip install -e . or with PyPI . Run the pytest : pytest tests/ -s The -s switch allows for interactive user input.","title":"Developer notes"},{"location":"developer_notes/#developer-notes","text":"","title":"Developer notes"},{"location":"developer_notes/#interactive-tests","text":"Oxymoron similar to \"holidays with kids\". Since some of these tests are interactive, they're hardly that inviting to run with every change. The issue here is that proper testing of some of the functionality requires developer to be logged in to the service.","title":"Interactive tests"},{"location":"developer_notes/#how-to-run-tests","text":"Install the package first, either through pip install -e . or with PyPI . Run the pytest : pytest tests/ -s The -s switch allows for interactive user input.","title":"How to run tests"},{"location":"getting_started/","text":"Getting started Installation We assume Earth Engine Python API is installed and EE authorised as desribed here . To install: git clone https://github.com/tracek/gee_asset_manager cd gee_asset_manager && pip install -e . Installation is an optional step; the application can be also run directly by executing geebam.py script. The advantage of having it installed is being able to execute geebam as any command line tool. I recommend installation within virtual environment. Command Line too Print help with: geebam -h usage: geebam.py [-h] [-s SERVICE_ACCOUNT] [-k PRIVATE_KEY] {delete,upload,cancel,report,copy} ... Google Earth Engine Batch Asset Manager positional arguments: {delete,upload,cancel,report,copy} delete Deletes collection and all items inside. Supports Unix-like wildcards. upload Batch Asset Uploader. cancel Cancel all running tasks report Produce summary of all assets. copy Batch copy of assets. Helps in migrating assets from Google Maps to GEE optional arguments: -h, --help show this help message and exit -s SERVICE_ACCOUNT, --service-account SERVICE_ACCOUNT Google Earth Engine service account. -k PRIVATE_KEY, --private-key PRIVATE_KEY Google Earth Engine private key file. To obtain help for a specific functionality, simply call it with help switch, e.g.: geebam upload -h . If you didn't install geebam, then you can run it just by going to geebam directory and running python geebam.py [arguments go here] Batch uploader The script creates an Image Collection from GeoTIFFs in your local directory. By default, the collection name is the same as the local directory name; with optional parameter you can provide a different name. Another optional parameter is a path to a CSV file with metadata for images, which is covered in the next section: Parsing metadata . geebam upload -h usage: geebam.py upload [-h] --source SOURCE --dest DEST [-m METADATA] [--large] [--nodata NODATA] [--bands BANDS] [-u USER] [-b BUCKET] [-e] [-a] [--headless] optional arguments: -h, --help show this help message and exit Required named arguments.: --source SOURCE Path to the directory with images for upload. --dest DEST Destination. Full path for upload to Google Earth Engine, e.g. users/pinkiepie/myponycollection -u USER, --user USER Google account name (gmail address). Optional named arguments: -m METADATA, --metadata METADATA Path to CSV with metadata. --large (Advanced) Use multipart upload. Might help if upload of large files is failing on some systems. Might cause other issues. --nodata NODATA The value to burn into the raster as NoData (missing data) --bands BANDS Comma-separated list of names to use for the image bands. Spacesor other special characters are not allowed. -b BUCKET, --bucket BUCKET Google Cloud Storage bucket name. -e, --upload-catch-error Return exit code 1 when upload catches an error -a, --tolerate-assets-already-exist Return exit 0 when assets already exist --headless Run the browser in headless mode (i.e. no user interface). Parsing metadata By metadata we understand here the properties associated with each image. Thanks to these, GEE user can easily filter collection based on specified criteria. The file with metadata should be organised as follows: filename (without extension) property1 header property2 header file1 value1 value2 file2 value3 value4 Note that header can contain only letters, digits and underscores. Example: id_no class category binomial system:time_start my_file_1 GASTROPODA EN Aaadonta constricta 1478943081000 my_file_2 GASTROPODA CR Aaadonta irregularis 1478943081000 The corresponding files are my_file_1.tif and my_file_2.tif. With each of the files five properties are associated: id_no, class, category, binomial and system:time_start. The latter is time in Unix epoch format, in milliseconds, as documented in GEE glosary. The program will match the file names from the upload directory with ones provided in the CSV and pass the metadata in JSON format: { id_no: my_file_1, class: GASTROPODA, category: EN, binomial: Aaadonta constricta, system:time_start: 1478943081000} The program will report any illegal fields, it will also complain if not all of the images passed for upload have metadata associated. User can opt to ignore it, in which case some assets will have no properties. Having metadata helps in organising your asstets, but is not mandatory - you can skip it. Usage examples Delete a collection with content: The delete is recursive, meaning it will delete also all children assets: images, collections and folders. Use with caution! geebam delete users/pinkiepie/test Console output: 2016-07-17 16:14:09,212 :: oauth2client.client :: INFO :: Attempting refresh to obtain initial access_token 2016-07-17 16:14:09,213 :: oauth2client.client :: INFO :: Refreshing access_token 2016-07-17 16:14:10,842 :: root :: INFO :: Attempting to delete collection test 2016-07-17 16:14:16,898 :: root :: INFO :: Collection users/pinkiepie/test removed Delete all directories / collections based on a Unix-like pattern geebam delete users/pinkiepie/*weird[0-9]?name* Upload a directory with images to your myfolder/mycollection and associate properties with each image: geebam upload -u pinkiepie@gmail.com --source path_to_directory_with_tif -m path_to_metadata.csv --dest users/pinkiepie/myfolder/myponycollection The script will prompt the user for Google account password. The program will also check that all properties in path_to_metadata.csv do not contain any illegal characters for GEE. Don't need metadata? Simply skip this option. Upload a directory with images with specific NoData value to a selected destination geebam upload -u pinkiepie@gmail.com --source path_to_directory_with_tif --dest users/pinkiepie/myfolder/myponycollection --nodata 222 In this case we need to supply full path to the destination, which is helpful when we upload to a shared folder. In the provided example we also burn value 222 into all rasters for missing data (NoData).","title":"Getting started"},{"location":"getting_started/#getting-started","text":"","title":"Getting started"},{"location":"getting_started/#installation","text":"We assume Earth Engine Python API is installed and EE authorised as desribed here . To install: git clone https://github.com/tracek/gee_asset_manager cd gee_asset_manager && pip install -e . Installation is an optional step; the application can be also run directly by executing geebam.py script. The advantage of having it installed is being able to execute geebam as any command line tool. I recommend installation within virtual environment.","title":"Installation"},{"location":"getting_started/#command-line-too","text":"Print help with: geebam -h usage: geebam.py [-h] [-s SERVICE_ACCOUNT] [-k PRIVATE_KEY] {delete,upload,cancel,report,copy} ... Google Earth Engine Batch Asset Manager positional arguments: {delete,upload,cancel,report,copy} delete Deletes collection and all items inside. Supports Unix-like wildcards. upload Batch Asset Uploader. cancel Cancel all running tasks report Produce summary of all assets. copy Batch copy of assets. Helps in migrating assets from Google Maps to GEE optional arguments: -h, --help show this help message and exit -s SERVICE_ACCOUNT, --service-account SERVICE_ACCOUNT Google Earth Engine service account. -k PRIVATE_KEY, --private-key PRIVATE_KEY Google Earth Engine private key file. To obtain help for a specific functionality, simply call it with help switch, e.g.: geebam upload -h . If you didn't install geebam, then you can run it just by going to geebam directory and running python geebam.py [arguments go here]","title":"Command Line too"},{"location":"getting_started/#batch-uploader","text":"The script creates an Image Collection from GeoTIFFs in your local directory. By default, the collection name is the same as the local directory name; with optional parameter you can provide a different name. Another optional parameter is a path to a CSV file with metadata for images, which is covered in the next section: Parsing metadata . geebam upload -h usage: geebam.py upload [-h] --source SOURCE --dest DEST [-m METADATA] [--large] [--nodata NODATA] [--bands BANDS] [-u USER] [-b BUCKET] [-e] [-a] [--headless] optional arguments: -h, --help show this help message and exit Required named arguments.: --source SOURCE Path to the directory with images for upload. --dest DEST Destination. Full path for upload to Google Earth Engine, e.g. users/pinkiepie/myponycollection -u USER, --user USER Google account name (gmail address). Optional named arguments: -m METADATA, --metadata METADATA Path to CSV with metadata. --large (Advanced) Use multipart upload. Might help if upload of large files is failing on some systems. Might cause other issues. --nodata NODATA The value to burn into the raster as NoData (missing data) --bands BANDS Comma-separated list of names to use for the image bands. Spacesor other special characters are not allowed. -b BUCKET, --bucket BUCKET Google Cloud Storage bucket name. -e, --upload-catch-error Return exit code 1 when upload catches an error -a, --tolerate-assets-already-exist Return exit 0 when assets already exist --headless Run the browser in headless mode (i.e. no user interface).","title":"Batch uploader"},{"location":"getting_started/#parsing-metadata","text":"By metadata we understand here the properties associated with each image. Thanks to these, GEE user can easily filter collection based on specified criteria. The file with metadata should be organised as follows: filename (without extension) property1 header property2 header file1 value1 value2 file2 value3 value4 Note that header can contain only letters, digits and underscores. Example: id_no class category binomial system:time_start my_file_1 GASTROPODA EN Aaadonta constricta 1478943081000 my_file_2 GASTROPODA CR Aaadonta irregularis 1478943081000 The corresponding files are my_file_1.tif and my_file_2.tif. With each of the files five properties are associated: id_no, class, category, binomial and system:time_start. The latter is time in Unix epoch format, in milliseconds, as documented in GEE glosary. The program will match the file names from the upload directory with ones provided in the CSV and pass the metadata in JSON format: { id_no: my_file_1, class: GASTROPODA, category: EN, binomial: Aaadonta constricta, system:time_start: 1478943081000} The program will report any illegal fields, it will also complain if not all of the images passed for upload have metadata associated. User can opt to ignore it, in which case some assets will have no properties. Having metadata helps in organising your asstets, but is not mandatory - you can skip it.","title":"Parsing metadata"},{"location":"getting_started/#usage-examples","text":"","title":"Usage examples"},{"location":"getting_started/#delete-a-collection-with-content","text":"The delete is recursive, meaning it will delete also all children assets: images, collections and folders. Use with caution! geebam delete users/pinkiepie/test Console output: 2016-07-17 16:14:09,212 :: oauth2client.client :: INFO :: Attempting refresh to obtain initial access_token 2016-07-17 16:14:09,213 :: oauth2client.client :: INFO :: Refreshing access_token 2016-07-17 16:14:10,842 :: root :: INFO :: Attempting to delete collection test 2016-07-17 16:14:16,898 :: root :: INFO :: Collection users/pinkiepie/test removed","title":"Delete a collection with content:"},{"location":"getting_started/#delete-all-directories-collections-based-on-a-unix-like-pattern","text":"geebam delete users/pinkiepie/*weird[0-9]?name*","title":"Delete all directories / collections based on a Unix-like pattern"},{"location":"getting_started/#upload-a-directory-with-images-to-your-myfoldermycollection-and-associate-properties-with-each-image","text":"geebam upload -u pinkiepie@gmail.com --source path_to_directory_with_tif -m path_to_metadata.csv --dest users/pinkiepie/myfolder/myponycollection The script will prompt the user for Google account password. The program will also check that all properties in path_to_metadata.csv do not contain any illegal characters for GEE. Don't need metadata? Simply skip this option.","title":"Upload a directory with images to your myfolder/mycollection and associate properties with each image:"},{"location":"getting_started/#upload-a-directory-with-images-with-specific-nodata-value-to-a-selected-destination","text":"geebam upload -u pinkiepie@gmail.com --source path_to_directory_with_tif --dest users/pinkiepie/myfolder/myponycollection --nodata 222 In this case we need to supply full path to the destination, which is helpful when we upload to a shared folder. In the provided example we also burn value 222 into all rasters for missing data (NoData).","title":"Upload a directory with images with specific NoData value to a selected destination"}]}